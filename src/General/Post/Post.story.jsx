import React from 'react'; //eslint-disable-line
import Post from './Post';

const postObj = {
  author: {
    name: 'Имя Фамилия',
    avatar: 'http://137.74.56.40:5000/assets/post/avatar.jpg',
    position: 'Младший ученик',
    blog: '#',
  },
  date: '2017-04-18',
  category: 'Категория',
  link: '#',
  title: 'Название поста очень длиннное. Хотя бывает и длиннее.',
  tags: [
    {
      url: '#',
      tag: 'tag1',
    },
    {
      url: '#',
      tag: 'tag2',
    },
    {
      url: '#',
      tag: 'tag3',
    },
  ],
  cover: 'http://137.74.56.40:5000/assets/post/testimg1.png',
  content: '<p>Это статья для тех, у кого появилось желание получить или улучшить навыки дизайна игр. В ней я приведу пять лучших, на мой взгляд, курсов на эту тему. Независимо от того, что именно вы хотите создавать – персонажей, окружения или пейзажи, – по    каждому направлению вы найдете подробные видеоуроки со всей необходимой информацией.</p>  <p>В этой статье мы рассмотрим результаты нескольких бенчмарков, начиная с PHP 5 и вплоть до экспериментальной JIT-ветки (сейчас в разработке). На момент написания не было известно, появится ли до PHP 8 ещё какая-то основная версия, например PHP 7.2. Но логично предположить, что возможности экспериментальной ветки как минимум будут включены в PHP 8.</p><p>C момента своего появления в 1994-м язык PHP радикально изменился. Первые релизы представляли собой просто внешние CGI-программы, которые создавались во многом как личный проект Расмуса Лердорфа. С третьей версии PHP был серьёзно переработан, возникла группа разработчиков языка.</p><p>Благодаря расширяемости PHP 3 функциональность языка стремительно разрасталась. Появлялись базовые и дополнительные расширения, которые привносили новые функции в разные сферы: работу с сетью, парсинг, кеширование и поддержку баз данных.</p><p>Развивался и сам язык, в него внесли много улучшений. Появилась поддержка объектно ориентированных конструкций, таких как классы, интерфейсы, трейты, замыкания и т. д.</p><p>Но многим разработчикам этого было мало. С ростом популярности языка росли и требования к нему со стороны сообщества, в основном связанные с производительностью, масштабируемостью и более экономным потреблением памяти.</p><p>Почти 20 лет создатели языка прилагали огромные усилия, чтобы удовлетворять всевозможные требования. Хотя с появлением PHP 3 производительность существенно возросла, сколько-то серьёзные результаты язык смог продемонстрировать только с PHP 4, когда появился движок Zend.</p><h2>Компилятор PHP JIT и ожидания по улучшению производительности PHP 8</h2><p>В 2000-м были внедрены новые in-memory компилятор и модель исполнения (executor model). Это позволило вновь сильно поднять производительность PHP, нередко в 5—10 раз. В результате его начали всерьёз рассматривать как инструмент для создания веб-приложений и сайтов. И сегодня PHP достиг высот, которых никто не ожидал от этого языка, когда он появился.</p><p>Но взрывной рост популярности PHP лишь привёл к росту требований о повышении производительности. К счастью, у движка Zend прекрасный потенциал для модернизации.</p><p>Хотя PHP 5 не стал заметным шагом вперёд и в некоторых случаях был даже медленнее PHP 4, группа разработчиков Zend постоянно оптимизировала движок от релиза к релизу, в результате PHP 5.6 оказался быстрее в 1,5—3 раза.</p><p>Но главный рывок произошёл с выходом PHP 7 в декабре 2015-го. Через год была анонсирована версия 7.1, тоже получившая ряд улучшений.</p>',
  ratings: {},
  comments: {},
};

module.exports = function ({ storiesOf, action }) { //eslint-disable-line
  return storiesOf('Post', module)
  .add('Single Post', () => (
    <Post postObj={postObj} fullPost="true" />
    ));
};
